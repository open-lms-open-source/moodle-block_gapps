{"version":3,"file":"gmail.min.js","sources":["../src/gmail.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module gmail\n *\n * @module     block_gapps/gmail\n * @copyright  2024 Copyright (c) 2024 Open LMS (https://www.openlms.net)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Gmail Inbox Feed\n *\n * @module block_gapps/gmail\n */\ndefine(['core/log'], function(log) {\n    /**\n     * Gmail class for handling Gmail integration\n     */\n    class Gmail {\n        constructor(clientId, numberOfMessages) {\n            this.clientId = clientId;\n            this.numberOfMessages = numberOfMessages;\n            this.scopes = 'https://www.googleapis.com/auth/gmail.readonly';\n            this.gapi = null;\n        }\n\n        /**\n         * Initialize the Gmail module\n         */\n        init() {\n            this.loadGapiClient().then(() => {\n                this.checkAuth();\n            }).catch((error) => {\n                this.handleReason(error);\n            });\n        }\n\n        /**\n         * Load the GAPI client\n         */\n        loadGapiClient() {\n            return new Promise((resolve, reject) => {\n                if (typeof gapi === 'undefined') {\n                    reject(new Error('Google API client not loaded'));\n                    return;\n                }\n\n                this.gapi = window.gapi;\n                this.gapi.load('client:auth2', {\n                    callback: resolve,\n                    onerror: reject\n                });\n            });\n        }\n\n        /**\n         * Promise rejection handler\n         * @param {Error|Object} reason\n         */\n        handleReason(reason) {\n            if (reason instanceof Error) {\n                log.warn(reason.message);\n            } else {\n                log.error(`Request failed: [${reason.status} ${reason.statusText}] ${reason.result.error.message}`);\n            }\n        }\n\n        /**\n         * Check authorization\n         */\n        checkAuth() {\n            log.info('Checking authorization');\n            if (this.gapi && this.gapi.auth2) {\n                this.gapi.auth2.authorize({\n                    client_id: this.clientId,\n                    scope: this.scopes,\n                    immediate: true\n                }, (authResult) => {\n                    this.handleAuthResult(authResult);\n                });\n            } else {\n                log.error('Google API client or auth2 not loaded');\n                this.handleAuthResult({error: 'Google API client or auth2 not loaded'});\n            }\n        }\n\n        /**\n         * Handle authorization result\n         * @param {Object} authResult\n         */\n        handleAuthResult(authResult) {\n            const authorizeElement = document.querySelector('.block_gapps .authorize');\n            if (authResult && !authResult.error) {\n                log.info('Successfully authorized');\n                authorizeElement.style.display = 'none';\n                this.fetchMessages(this.renderMessages.bind(this));\n            } else {\n                log.info('Not authorized or failed to authorize');\n                if (authResult.error) {\n                    log.warn('Authorization error: ' + authResult.error);\n                }\n                authorizeElement.addEventListener('click', this.handleAuthClick.bind(this));\n                authorizeElement.style.display = 'inline';\n            }\n        }\n\n        /**\n         * Handle authorization click\n         * @param {Event} e\n         */\n        handleAuthClick(e) {\n            e.preventDefault();\n            log.info('User requested authorization');\n            this.gapi.auth2.authorize({\n                client_id: this.clientId,\n                scope: this.scopes,\n                immediate: false\n            }, (authResult) => {\n                this.handleAuthResult(authResult);\n            });\n        }\n\n        /**\n         * Fetch messages\n         * @param {Function} callback\n         */\n        fetchMessages(callback) {\n            let messages = [];\n            this.gapi.client.load('gmail', 'v1')\n                .then(() => {\n                    log.info('Gmail v1 client library loaded');\n                    return this.fetchUnreadMessages();\n                })\n                .then((resp) => {\n                    log.info('Request for messages list successful');\n                    if (resp.result.messages.length === 0) {\n                        callback.call(this, 0, []);\n                        throw new Error('No unread messages returned');\n                    }\n                    messages = resp.result.messages;\n                    return this.fetchMessageDetailsAndInbox(messages);\n                })\n                .then((resp) => {\n                    log.info('Batch request successful');\n                    const data = this.processMessageDetailsAndInboxResponses(resp, messages);\n                    callback.call(this, data.unreadMessagesCount, data.messages);\n                })\n                .catch((reason) => {\n                    this.handleReason(reason);\n                });\n        }\n\n        /**\n         * Fetch unread Gmail messages\n         * @returns {Promise}\n         */\n        fetchUnreadMessages() {\n            return this.gapi.client.gmail.users.messages.list({\n                userId: 'me',\n                q: 'is:unread',\n                maxResults: this.numberOfMessages\n            });\n        }\n\n        /**\n         * Fetch message details and inbox\n         * @param {Array} messages\n         * @returns {Promise}\n         */\n        fetchMessageDetailsAndInbox(messages) {\n            const httpBatch = this.gapi.client.newHttpBatch();\n            messages.forEach((message) => {\n                const httpRequest = this.gapi.client.gmail.users.messages.get({\n                    userId: 'me',\n                    id: message.id,\n                    fields: 'id,payload(headers),snippet'\n                });\n                httpBatch.add(httpRequest, {id: message.id});\n            });\n            const inboxRequest = this.gapi.client.gmail.users.labels.get({\n                userId: 'me',\n                id: 'INBOX'\n            });\n            httpBatch.add(inboxRequest, {id: 'INBOX'});\n            return httpBatch;\n        }\n\n        /**\n         * Process message details and inbox responses\n         * @param {Object} resp\n         * @param {Array} messages\n         * @returns {{unreadMessagesCount: number, messages: Array}}\n         */\n        processMessageDetailsAndInboxResponses(resp, messages) {\n            const messagesList = messages.reduce((acc, message) => {\n                if (resp.result[message.id]) {\n                    const messageData = resp.result[message.id].result;\n                    const from = this.getFromNames(\n                        this.findHeaderValue('From', messageData.payload.headers)\n                    );\n                    acc.push({\n                        id: messageData.id,\n                        subject: this.findHeaderValue('Subject', messageData.payload.headers),\n                        fromFirstName: from.firstName,\n                        fromLastName: from.lastName,\n                        snippet: messageData.snippet\n                    });\n                } else {\n                    log.warn(`Failed to find message with ID ${message.id}`);\n                }\n                return acc;\n            }, []);\n\n            const unreadCount = resp.result.INBOX ? resp.result.INBOX.result.messagesUnread : 0;\n\n            return {\n                unreadMessagesCount: unreadCount,\n                messages: messagesList\n            };\n        }\n\n        /**\n         * Render the email messages onto the page\n         * @param {number} unreadMessagesCount Number of unread messages in the user's inbox\n         * @param {Array} messages Unread email messages\n         */\n        renderMessages(unreadMessagesCount, messages) {\n            log.info('Rendering email messages');\n\n            const container = document.querySelector('.block_gapps .unreadmessages');\n            if (!container) {\n                log.error('Container element not found');\n                return;\n            }\n\n            const unreadInfo = document.createElement('small');\n            unreadInfo.className = 'unreadinfo';\n            unreadInfo.textContent = `Unread messages: ${unreadMessagesCount}`;\n\n            const composeLink = document.createElement('small');\n            composeLink.innerHTML = '<a href=\"https://mail.google.com/mail/u/0/#inbox?compose=new\">Compose</a>';\n\n            const messagesList = document.createElement('ul');\n            messagesList.className = 'messages unstyled';\n\n            messages.forEach(message => {\n                const li = document.createElement('li');\n                const nameSpan = document.createElement('span');\n                nameSpan.textContent = `${message.fromFirstName} ${message.fromLastName}`;\n                li.appendChild(nameSpan);\n                li.appendChild(document.createElement('br'));\n\n                const link = document.createElement('a');\n                link.href = `https://mail.google.com/mail/u/0/#inbox/${message.id}`;\n                link.title = message.snippet;\n                link.textContent = message.subject || 'No subject';\n                li.appendChild(link);\n\n                li.appendChild(document.createElement('hr'));\n                messagesList.appendChild(li);\n            });\n\n            container.innerHTML = '';\n            container.appendChild(unreadInfo);\n            container.appendChild(document.createElement('br'));\n            container.appendChild(composeLink);\n            container.appendChild(messagesList);\n        }\n\n        /**\n         * Get first name and last name from the 'from' header\n         * @param {string} from\n         * @returns {{firstName: string, lastName: string}}\n         */\n        getFromNames(from) {\n            const name = from.replace(/<.*>$/, '').trim();\n            const parts = name.split(' ');\n            const lastName = parts.length > 1 ? parts.pop() : '';\n            const firstName = parts.join(' ');\n            return {firstName, lastName};\n        }\n\n        /**\n         * Find header value\n         * @param {string} name\n         * @param {Array} headers\n         * @returns {string}\n         */\n        findHeaderValue(name, headers) {\n            const header = headers.find(h => h.name.toLowerCase() === name.toLowerCase());\n            return header ? header.value : '';\n        }\n    }\n\n    return {\n        init: function(clientId, numberOfMessages) {\n            const gmail = new Gmail(clientId, numberOfMessages);\n            gmail.init();\n        }\n    };\n});\n"],"names":["define","log","Gmail","constructor","clientId","numberOfMessages","scopes","gapi","init","loadGapiClient","then","checkAuth","catch","error","handleReason","Promise","resolve","reject","window","load","callback","onerror","Error","reason","warn","message","status","statusText","result","info","this","auth2","authorize","client_id","scope","immediate","authResult","handleAuthResult","authorizeElement","document","querySelector","style","display","fetchMessages","renderMessages","bind","addEventListener","handleAuthClick","e","preventDefault","messages","client","fetchUnreadMessages","resp","length","call","fetchMessageDetailsAndInbox","data","processMessageDetailsAndInboxResponses","unreadMessagesCount","gmail","users","list","userId","q","maxResults","httpBatch","newHttpBatch","forEach","httpRequest","get","id","fields","add","inboxRequest","labels","messagesList","reduce","acc","messageData","from","getFromNames","findHeaderValue","payload","headers","push","subject","fromFirstName","firstName","fromLastName","lastName","snippet","INBOX","messagesUnread","container","unreadInfo","createElement","className","textContent","composeLink","innerHTML","li","nameSpan","appendChild","link","href","title","parts","replace","trim","split","pop","join","name","header","find","h","toLowerCase","value"],"mappings":"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"}