/**
 * TODO describe module gmail
 *
 * @module     block_gapps/gmail
 * @copyright  2024 Copyright (c) 2024 Open LMS (https://www.openlms.net)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("block_gapps/gmail",["core/log"],(function(log){class Gmail{constructor(clientId,numberOfMessages){this.clientId=clientId,this.numberOfMessages=numberOfMessages,this.scopes="https://www.googleapis.com/auth/gmail.readonly",this.gapi=null}init(){this.loadGapiClient().then((()=>{this.checkAuth()})).catch((error=>{this.handleReason(error)}))}loadGapiClient(){return new Promise(((resolve,reject)=>{"undefined"!=typeof gapi?(this.gapi=window.gapi,this.gapi.load("client:auth2",{callback:resolve,onerror:reject})):reject(new Error("Google API client not loaded"))}))}handleReason(reason){reason instanceof Error?log.warn(reason.message):log.error("Request failed: [".concat(reason.status," ").concat(reason.statusText,"] ").concat(reason.result.error.message))}checkAuth(){log.info("Checking authorization"),this.gapi&&this.gapi.auth2?this.gapi.auth2.authorize({client_id:this.clientId,scope:this.scopes,immediate:!0},(authResult=>{this.handleAuthResult(authResult)})):(log.error("Google API client or auth2 not loaded"),this.handleAuthResult({error:"Google API client or auth2 not loaded"}))}handleAuthResult(authResult){const authorizeElement=document.querySelector(".block_gapps .authorize");authResult&&!authResult.error?(log.info("Successfully authorized"),authorizeElement.style.display="none",this.fetchMessages(this.renderMessages.bind(this))):(log.info("Not authorized or failed to authorize"),authResult.error&&log.warn("Authorization error: "+authResult.error),authorizeElement.addEventListener("click",this.handleAuthClick.bind(this)),authorizeElement.style.display="inline")}handleAuthClick(e){e.preventDefault(),log.info("User requested authorization"),this.gapi.auth2.authorize({client_id:this.clientId,scope:this.scopes,immediate:!1},(authResult=>{this.handleAuthResult(authResult)}))}fetchMessages(callback){let messages=[];this.gapi.client.load("gmail","v1").then((()=>(log.info("Gmail v1 client library loaded"),this.fetchUnreadMessages()))).then((resp=>{if(log.info("Request for messages list successful"),0===resp.result.messages.length)throw callback.call(this,0,[]),new Error("No unread messages returned");return messages=resp.result.messages,this.fetchMessageDetailsAndInbox(messages)})).then((resp=>{log.info("Batch request successful");const data=this.processMessageDetailsAndInboxResponses(resp,messages);callback.call(this,data.unreadMessagesCount,data.messages)})).catch((reason=>{this.handleReason(reason)}))}fetchUnreadMessages(){return this.gapi.client.gmail.users.messages.list({userId:"me",q:"is:unread",maxResults:this.numberOfMessages})}fetchMessageDetailsAndInbox(messages){const httpBatch=this.gapi.client.newHttpBatch();messages.forEach((message=>{const httpRequest=this.gapi.client.gmail.users.messages.get({userId:"me",id:message.id,fields:"id,payload(headers),snippet"});httpBatch.add(httpRequest,{id:message.id})}));const inboxRequest=this.gapi.client.gmail.users.labels.get({userId:"me",id:"INBOX"});return httpBatch.add(inboxRequest,{id:"INBOX"}),httpBatch}processMessageDetailsAndInboxResponses(resp,messages){const messagesList=messages.reduce(((acc,message)=>{if(resp.result[message.id]){const messageData=resp.result[message.id].result,from=this.getFromNames(this.findHeaderValue("From",messageData.payload.headers));acc.push({id:messageData.id,subject:this.findHeaderValue("Subject",messageData.payload.headers),fromFirstName:from.firstName,fromLastName:from.lastName,snippet:messageData.snippet})}else log.warn("Failed to find message with ID ".concat(message.id));return acc}),[]);return{unreadMessagesCount:resp.result.INBOX?resp.result.INBOX.result.messagesUnread:0,messages:messagesList}}renderMessages(unreadMessagesCount,messages){log.info("Rendering email messages");const container=document.querySelector(".block_gapps .unreadmessages");if(!container)return void log.error("Container element not found");const unreadInfo=document.createElement("small");unreadInfo.className="unreadinfo",unreadInfo.textContent="Unread messages: ".concat(unreadMessagesCount);const composeLink=document.createElement("small");composeLink.innerHTML='<a href="https://mail.google.com/mail/u/0/#inbox?compose=new">Compose</a>';const messagesList=document.createElement("ul");messagesList.className="messages unstyled",messages.forEach((message=>{const li=document.createElement("li"),nameSpan=document.createElement("span");nameSpan.textContent="".concat(message.fromFirstName," ").concat(message.fromLastName),li.appendChild(nameSpan),li.appendChild(document.createElement("br"));const link=document.createElement("a");link.href="https://mail.google.com/mail/u/0/#inbox/".concat(message.id),link.title=message.snippet,link.textContent=message.subject||"No subject",li.appendChild(link),li.appendChild(document.createElement("hr")),messagesList.appendChild(li)})),container.innerHTML="",container.appendChild(unreadInfo),container.appendChild(document.createElement("br")),container.appendChild(composeLink),container.appendChild(messagesList)}getFromNames(from){const parts=from.replace(/<.*>$/,"").trim().split(" "),lastName=parts.length>1?parts.pop():"";return{firstName:parts.join(" "),lastName:lastName}}findHeaderValue(name,headers){const header=headers.find((h=>h.name.toLowerCase()===name.toLowerCase()));return header?header.value:""}}return{init:function(clientId,numberOfMessages){new Gmail(clientId,numberOfMessages).init()}}}));

//# sourceMappingURL=gmail.min.js.map